
--  Page 1: Data Definition Language (DDL)

-- 1. Creating a Database
CREATE DATABASE mydatabase;

-- 2. Using a Database
USE mydatabase;

-- 3. Creating Tables
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    birthdate DATE,
    salary DECIMAL(10, 2),
    department_id INT
);

-- 4. Altering Tables
-- Add a column
ALTER TABLE employees
ADD phone_number VARCHAR(15);

-- Rename a column
ALTER TABLE employees
RENAME COLUMN last_name TO surname;

-- Drop a column
ALTER TABLE employees
DROP COLUMN phone_number;

-- Add constraints
ALTER TABLE employees
ADD CONSTRAINT fk_department
FOREIGN KEY (department_id) REFERENCES departments(department_id);

-- 5. Dropping Tables
DROP TABLE employees;

-- 6. Creating Indexes
CREATE INDEX idx_lastname ON employees(surname);

-- 7. Dropping Indexes
DROP INDEX idx_lastname ON employees;

-- Page 2: Data Manipulation Language (DML)

-- 8. Inserting Data
INSERT INTO employees (employee_id, first_name, surname, birthdate, salary, department_id)
VALUES (1, 'John', 'Doe', '1980-01-01', 50000.00, 101);

-- 9. Updating Data
UPDATE employees
SET salary = 55000
WHERE employee_id = 1;

-- 10. Deleting Data
DELETE FROM employees
WHERE employee_id = 1;

-- 11. Truncating a Table
TRUNCATE TABLE employees;

-- Page 3: Data Query Language (DQL)

-- 12. Selecting Data
SELECT * FROM employees;

-- 13. Filtering Rows
SELECT * FROM employees WHERE salary > 40000;

-- 14. Sorting Rows
SELECT * FROM employees ORDER BY surname ASC;

-- 15. Limiting Rows
SELECT * FROM employees LIMIT 5;

-- 16. Using Aliases
SELECT first_name AS fname, surname AS lname FROM employees;

-- Page 4: Advanced Filtering and Grouping

-- 17. Using LIKE for Pattern Matching
SELECT * FROM employees WHERE first_name LIKE 'J%';

-- 18. Using IN
SELECT * FROM employees WHERE surname IN ('Doe', 'Smith');

-- 19. Using BETWEEN
SELECT * FROM employees WHERE salary BETWEEN 40000 AND 60000;

-- 20. Combining Conditions with AND and OR
SELECT * FROM employees WHERE salary > 40000 AND birthdate < '1990-01-01';

-- 21. Using Aggregate Functions
SELECT AVG(salary) AS average_salary FROM employees;
SELECT COUNT(*) AS total_employees FROM employees;

-- 22. Grouping Data with GROUP BY
SELECT department_id, AVG(salary) AS average_salary FROM employees GROUP BY department_id;

-- 23. Filtering Groups with HAVING
SELECT department_id, AVG(salary) AS average_salary
FROM employees
GROUP BY department_id
HAVING AVG(salary) > 50000;

-- Page 5: Joining Tables

-- 24. Inner Join
SELECT employees.first_name, departments.department_name
FROM employees
INNER JOIN departments ON employees.department_id = departments.department_id;

-- 25. Left Join
SELECT employees.first_name, departments.department_name
FROM employees
LEFT JOIN departments ON employees.department_id = departments.department_id;

-- 26. Right Join
SELECT employees.first_name, departments.department_name
FROM employees
RIGHT JOIN departments ON employees.department_id = departments.department_id;

-- 27. Full Join
SELECT employees.first_name, departments.department_name
FROM employees
FULL JOIN departments ON employees.department_id = departments.department_id;

-- Page 6: Data Control Language (DCL) and Transaction Control Language (TCL)

-- 28. Granting Permissions
GRANT SELECT, INSERT ON employees TO 'username'@'hostname';

-- 29. Revoking Permissions
REVOKE SELECT, INSERT ON employees FROM 'username'@'hostname';

-- 30. Starting a Transaction
START TRANSACTION;

-- 31. Committing a Transaction
COMMIT;

-- 32. Rolling Back a Transaction
ROLLBACK;

Page 7: Procedural SQL

33. Creating a Stored Procedure
DELIMITER //

CREATE PROCEDURE GetEmployeeSalary (IN emp_id INT)
BEGIN
    SELECT salary FROM employees WHERE employee_id = emp_id;
END //

DELIMITER ;

-- 34. Calling a Stored Procedure
CALL GetEmployeeSalary(1);

-- 35. Creating a Trigger
CREATE TRIGGER before_employee_insert
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    IF NEW.salary < 0 THEN
        SET NEW.salary = 0;
    END IF;
END;

-- 36. Creating a Function
DELIMITER //

CREATE FUNCTION CalculateBonus (salary DECIMAL(10,2))
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
    RETURN salary * 0.10;
END //
DELIMITER ;

-- 37. Calling a Function
SELECT CalculateBonus(50000);

-- Summary:

-- DDL: Creating, altering, and dropping databases, tables, and indexes.
-- DML: Inserting, updating, deleting, and truncating data.
-- DQL: Selecting and querying data with filtering, sorting, and grouping.
-- DCL: Granting and revoking permissions.
-- TCL: Transaction control with commit and rollback.
-- Procedural SQL: Stored procedures, triggers, and functions.
-- This structure should help both beginners and advanced users quickly reference the most important SQL commands and concepts.
